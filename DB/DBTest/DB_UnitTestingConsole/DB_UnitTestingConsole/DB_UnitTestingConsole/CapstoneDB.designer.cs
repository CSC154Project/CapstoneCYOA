#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DB_UnitTestingConsole
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="capstone")]
	public partial class CapstoneDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChoice(Choice instance);
    partial void UpdateChoice(Choice instance);
    partial void DeleteChoice(Choice instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertEncounter(Encounter instance);
    partial void UpdateEncounter(Encounter instance);
    partial void DeleteEncounter(Encounter instance);
    partial void InsertEncounterType(EncounterType instance);
    partial void UpdateEncounterType(EncounterType instance);
    partial void DeleteEncounterType(EncounterType instance);
    #endregion
		
		public CapstoneDBDataContext() : 
				base(global::DB_UnitTestingConsole.Properties.Settings.Default.capstoneConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CapstoneDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CapstoneDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CapstoneDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CapstoneDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Choice> Choices
		{
			get
			{
				return this.GetTable<Choice>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Encounter> Encounters
		{
			get
			{
				return this.GetTable<Encounter>();
			}
		}
		
		public System.Data.Linq.Table<EncounterType> EncounterTypes
		{
			get
			{
				return this.GetTable<EncounterType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Choices")]
	public partial class Choice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EncID;
		
		private int _ID;
		
		private int _QuestionID;
		
		private string _Text;
		
		private int _NextEID;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Encounter> _Encounter;
		
		private EntityRef<Encounter> _Encounter1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEncIDChanging(int value);
    partial void OnEncIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnNextEIDChanging(int value);
    partial void OnNextEIDChanged();
    #endregion
		
		public Choice()
		{
			this._Question = default(EntityRef<Question>);
			this._Encounter = default(EntityRef<Encounter>);
			this._Encounter1 = default(EntityRef<Encounter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncID", DbType="Int NOT NULL")]
		public int EncID
		{
			get
			{
				return this._EncID;
			}
			set
			{
				if ((this._EncID != value))
				{
					if (this._Encounter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEncIDChanging(value);
					this.SendPropertyChanging();
					this._EncID = value;
					this.SendPropertyChanged("EncID");
					this.OnEncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextEID", DbType="Int NOT NULL")]
		public int NextEID
		{
			get
			{
				return this._NextEID;
			}
			set
			{
				if ((this._NextEID != value))
				{
					if (this._Encounter1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextEIDChanging(value);
					this.SendPropertyChanging();
					this._NextEID = value;
					this.SendPropertyChanged("NextEID");
					this.OnNextEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Choice", Storage="_Question", ThisKey="QuestionID", OtherKey="ID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Choices.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Choices.Add(this);
						this._QuestionID = value.ID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Encounter_Choice", Storage="_Encounter", ThisKey="EncID", OtherKey="EncounterID", IsForeignKey=true)]
		public Encounter Encounter
		{
			get
			{
				return this._Encounter.Entity;
			}
			set
			{
				Encounter previousValue = this._Encounter.Entity;
				if (((previousValue != value) 
							|| (this._Encounter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Encounter.Entity = null;
						previousValue.Choices.Remove(this);
					}
					this._Encounter.Entity = value;
					if ((value != null))
					{
						value.Choices.Add(this);
						this._EncID = value.EncounterID;
					}
					else
					{
						this._EncID = default(int);
					}
					this.SendPropertyChanged("Encounter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Encounter_Choice1", Storage="_Encounter1", ThisKey="NextEID", OtherKey="EncounterID", IsForeignKey=true)]
		public Encounter Encounter1
		{
			get
			{
				return this._Encounter1.Entity;
			}
			set
			{
				Encounter previousValue = this._Encounter1.Entity;
				if (((previousValue != value) 
							|| (this._Encounter1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Encounter1.Entity = null;
						previousValue.Choices1.Remove(this);
					}
					this._Encounter1.Entity = value;
					if ((value != null))
					{
						value.Choices1.Add(this);
						this._NextEID = value.EncounterID;
					}
					else
					{
						this._NextEID = default(int);
					}
					this.SendPropertyChanged("Encounter1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EncID;
		
		private int _ID;
		
		private string _Text;
		
		private EntitySet<Choice> _Choices;
		
		private EntityRef<Encounter> _Encounter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEncIDChanging(int value);
    partial void OnEncIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Question()
		{
			this._Choices = new EntitySet<Choice>(new Action<Choice>(this.attach_Choices), new Action<Choice>(this.detach_Choices));
			this._Encounter = default(EntityRef<Encounter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncID", DbType="Int NOT NULL")]
		public int EncID
		{
			get
			{
				return this._EncID;
			}
			set
			{
				if ((this._EncID != value))
				{
					if (this._Encounter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEncIDChanging(value);
					this.SendPropertyChanging();
					this._EncID = value;
					this.SendPropertyChanged("EncID");
					this.OnEncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Choice", Storage="_Choices", ThisKey="ID", OtherKey="QuestionID")]
		public EntitySet<Choice> Choices
		{
			get
			{
				return this._Choices;
			}
			set
			{
				this._Choices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Encounter_Question", Storage="_Encounter", ThisKey="EncID", OtherKey="EncounterID", IsForeignKey=true)]
		public Encounter Encounter
		{
			get
			{
				return this._Encounter.Entity;
			}
			set
			{
				Encounter previousValue = this._Encounter.Entity;
				if (((previousValue != value) 
							|| (this._Encounter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Encounter.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Encounter.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._EncID = value.EncounterID;
					}
					else
					{
						this._EncID = default(int);
					}
					this.SendPropertyChanged("Encounter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Choices(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Choices(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Encounter")]
	public partial class Encounter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EncounterID;
		
		private int _EncounterTypeID;
		
		private EntitySet<Choice> _Choices;
		
		private EntitySet<Choice> _Choices1;
		
		private EntitySet<Question> _Questions;
		
		private EntityRef<EncounterType> _EncounterType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEncounterIDChanging(int value);
    partial void OnEncounterIDChanged();
    partial void OnEncounterTypeIDChanging(int value);
    partial void OnEncounterTypeIDChanged();
    #endregion
		
		public Encounter()
		{
			this._Choices = new EntitySet<Choice>(new Action<Choice>(this.attach_Choices), new Action<Choice>(this.detach_Choices));
			this._Choices1 = new EntitySet<Choice>(new Action<Choice>(this.attach_Choices1), new Action<Choice>(this.detach_Choices1));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._EncounterType = default(EntityRef<EncounterType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncounterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EncounterID
		{
			get
			{
				return this._EncounterID;
			}
			set
			{
				if ((this._EncounterID != value))
				{
					this.OnEncounterIDChanging(value);
					this.SendPropertyChanging();
					this._EncounterID = value;
					this.SendPropertyChanged("EncounterID");
					this.OnEncounterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncounterTypeID", DbType="Int NOT NULL")]
		public int EncounterTypeID
		{
			get
			{
				return this._EncounterTypeID;
			}
			set
			{
				if ((this._EncounterTypeID != value))
				{
					if (this._EncounterType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEncounterTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EncounterTypeID = value;
					this.SendPropertyChanged("EncounterTypeID");
					this.OnEncounterTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Encounter_Choice", Storage="_Choices", ThisKey="EncounterID", OtherKey="EncID")]
		public EntitySet<Choice> Choices
		{
			get
			{
				return this._Choices;
			}
			set
			{
				this._Choices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Encounter_Choice1", Storage="_Choices1", ThisKey="EncounterID", OtherKey="NextEID")]
		public EntitySet<Choice> Choices1
		{
			get
			{
				return this._Choices1;
			}
			set
			{
				this._Choices1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Encounter_Question", Storage="_Questions", ThisKey="EncounterID", OtherKey="EncID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EncounterType_Encounter", Storage="_EncounterType", ThisKey="EncounterTypeID", OtherKey="ID", IsForeignKey=true)]
		public EncounterType EncounterType
		{
			get
			{
				return this._EncounterType.Entity;
			}
			set
			{
				EncounterType previousValue = this._EncounterType.Entity;
				if (((previousValue != value) 
							|| (this._EncounterType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EncounterType.Entity = null;
						previousValue.Encounters.Remove(this);
					}
					this._EncounterType.Entity = value;
					if ((value != null))
					{
						value.Encounters.Add(this);
						this._EncounterTypeID = value.ID;
					}
					else
					{
						this._EncounterTypeID = default(int);
					}
					this.SendPropertyChanged("EncounterType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Choices(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Encounter = this;
		}
		
		private void detach_Choices(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Encounter = null;
		}
		
		private void attach_Choices1(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Encounter1 = this;
		}
		
		private void detach_Choices1(Choice entity)
		{
			this.SendPropertyChanging();
			entity.Encounter1 = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Encounter = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Encounter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EncounterType")]
	public partial class EncounterType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private EntitySet<Encounter> _Encounters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public EncounterType()
		{
			this._Encounters = new EntitySet<Encounter>(new Action<Encounter>(this.attach_Encounters), new Action<Encounter>(this.detach_Encounters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EncounterType_Encounter", Storage="_Encounters", ThisKey="ID", OtherKey="EncounterTypeID")]
		public EntitySet<Encounter> Encounters
		{
			get
			{
				return this._Encounters;
			}
			set
			{
				this._Encounters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Encounters(Encounter entity)
		{
			this.SendPropertyChanging();
			entity.EncounterType = this;
		}
		
		private void detach_Encounters(Encounter entity)
		{
			this.SendPropertyChanging();
			entity.EncounterType = null;
		}
	}
}
#pragma warning restore 1591
